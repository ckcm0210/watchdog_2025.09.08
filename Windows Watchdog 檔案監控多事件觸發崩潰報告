Windows Watchdog 檔案監控多事件觸發崩潰報告
問題摘要
錯誤代碼：Windows fatal exception: code 0x80000003
發生時間：2025-09-09 09:52:18
崩潰位置：xml.etree.ElementTree 垃圾回收階段
影響範圍：方法二（無預建基準）立即崩潰，方法一（預建基準）運行一段時間後崩潰

根本原因分析
主要成因：多線程 XML 解析競態條件
程式崩潰的核心問題是 xml.etree.ElementTree 不具備線程安全性，當 watchdog 同時觸發多個檔案處理事件時，多個線程嘗試並發解析 Excel 檔案（本質上是 XML 格式），導致內部資料結構corruption，最終在垃圾回收階段觸發致命例外。

為什麼同一檔案會觸發多個監控事件
1. Windows 檔案系統事件機制
Windows 作業系統對單一檔案操作會產生多重事件序列

典型的儲存動作會觸發：created → modified → modified → closed

每個事件都可能獨立啟動一個處理線程

2. Excel 檔案儲存的複雜性
Excel 使用「臨時檔寫入 → 刪除原檔 → 重新命名」的安全儲存機制

這個過程會產生：建立臨時檔、寫入內容、刪除原檔、改名等多個檔案系統事件

若程式未正確處理這些事件序列，會把一次儲存誤判為多次檔案變更

3. watchdog 庫的事件重複問題
watchdog 在 Windows 平台存在已知的重複事件問題

相同操作可能被報告 2-3 次，特別是 modified 事件

若未在應用層去重，每個重複事件都會啟動獨立的處理流程

4. 檔案複製期間的連續事件
大檔案複製到監控資料夾期間會持續觸發 modified 事件

程式可能在檔案尚未完全複製完成時就開始處理，導致讀取不完整資料

複製完成後的最終事件又會再次觸發處理，造成重複工作

方法一 vs 方法二的差異分析
方法一（建立 Baseline）較穩定的原因
單線程初始化：啟動時以序列化方式處理所有檔案，ElementTree 在安全環境下工作

負載分散：大部分 XML 解析工作已在啟動階段完成，後續監控負載較輕

狀態預熱：記憶體分配器和快取已準備就緒，能更好應對後續峰值

方法二（即時處理）立即崩潰的原因
冷啟動併發：多個檔案事件同時觸發，在未預熱的狀態下並發啟動 XML 解析

資源競爭：ElementTree 的內部資料結構在多線程訪問下出現競態條件

記憶體碎片：併發分配大量記憶體導致碎片化，增加 OOM 風險

技術層級解決方案
立即性修復（高優先級）
事件去重機制：同一檔案路徑在短時間窗口內（如 500ms）只處理一次事件

檔案穩定性檢查：確認檔案大小和修改時間連續兩次檢查一致後才進行處理

全域處理鎖：確保同一時間只有一個檔案處理程序在執行（單線程化）

結構性修復（建議實施）
改用進程隔離：將 Excel 解析工作分派到獨立進程，避免線程安全問題

替換 XML 解析器：使用線程安全的 lxml 或 defusedxml 取代標準 ElementTree

實作工作佇列：將所有檔案處理請求序列化到單一工作者線程

系統層級優化
忽略臨時檔：過濾 Excel 產生的臨時檔案（~$、.tmp 等），只處理最終檔案

監控事件優化：只監控 moved 和 closed 事件，忽略中間的 modified 事件

定期重啟機制：在長期運行環境中實施定期重啟，清理累積的內部狀態

預防措施建議
短期措施
實施強制事件去重，避免重複處理

加入檔案處理的互斥鎖，確保單線程執行

增加錯誤捕獲和自動重啟機制

長期策略
考慮重構為基於訊息佇列的非同步處理架構

實施更精確的檔案狀態監控，區分「寫入中」和「寫入完成」

建立完整的錯誤監控和診斷系統

結論
此次崩潰並非單純的記憶體洩漏或暖機問題，而是 watchdog 多事件觸發與 ElementTree 線程安全缺陷的結合性故障。透過實施事件去重、處理序列化，以及改用線程安全的 XML 解析器，可以從根本上解決此問題，確保系統在各種啟動情境下都能穩定運行。
